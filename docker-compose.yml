services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: webbuilder-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: webbuilder
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicación Web Builder
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: webbuilder-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Database
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/webbuilder?schema=public"

      # AI APIs
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY}

      # NextAuth
      AUTH_SECRET: ${AUTH_SECRET:-change-this-to-a-random-secret-in-production}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}

      # Google OAuth (optional)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}

      # App
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      NODE_ENV: "production"

      # Database seeding (set to true to seed on first run)
      SEED_DB: ${SEED_DB:-false}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Volumen para hot-reload en desarrollo (comentar en producción)
      # - ./apps/web:/app/apps/web
      - node_modules:/app/node_modules

volumes:
  postgres_data:
  node_modules:
