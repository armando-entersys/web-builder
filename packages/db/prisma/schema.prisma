// Prisma Schema para Web Builder
// Optimizado para AI-first development

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// CORE MODELS
// ==========================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String? // Hash de la contraseña (bcrypt)
  image     String? // URL de avatar
  role      UserRole @default(USER)

  // OAuth
  emailVerified DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects Project[]
  accounts Account[]
  sessions Session[]

  @@map("users")
}

// Para OAuth (Google, GitHub, etc.)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Sesiones de usuario
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Tokens de verificación
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  industry    String? // SaaS, eCommerce, etc.
  status      ProjectStatus @default(DRAFT)

  // JSON fields para flexibilidad
  sitemap     Json? // Estructura del sitemap
  styleGuide  Json? // Design tokens y configuración de estilo
  settings    Json? // Configuración general del proyecto

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  pages  Page[]

  @@index([userId])
  @@index([status])
  @@map("projects")
}

model Page {
  id          String   @id @default(cuid())
  slug        String   // URL slug (e.g., "/pricing", "/about")
  title       String
  description String?

  // Estructura de la página
  wireframe   Json? // Estructura de componentes
  content     Json? // Contenido generado por IA
  schema      Json? // Schema.org markup

  // SEO & Metadata
  metaTitle       String?
  metaDescription String?
  ogImage         String?

  // AI Optimization
  aiOptimization  Json? // Datos de optimización para búsqueda conversacional

  // Orden y visibilidad
  order       Int      @default(0)
  isPublished Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  template  Template? @relation(fields: [templateId], references: [id])
  templateId String?

  @@unique([projectId, slug])
  @@index([projectId])
  @@index([isPublished])
  @@map("pages")
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    TemplateCategory
  industry    String? // SaaS, eCommerce, etc.

  // Estructura del template
  structure   Json // Estructura de componentes predefinida
  preview     String? // URL de imagen preview

  // Metadata
  tags        String[]
  isPremium   Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  pages       Page[]

  @@index([category])
  @@index([industry])
  @@map("templates")
}

// ==========================================
// AI GENERATION HISTORY
// ==========================================

model AIGeneration {
  id          String   @id @default(cuid())
  type        AIGenerationType
  prompt      String   @db.Text
  response    Json
  model       String // gpt-4o, claude-3.7, gemini-2.0
  tokensUsed  Int
  cost        Float?

  // Context
  projectId   String?
  pageId      String?
  metadata    Json? // Contexto adicional

  createdAt   DateTime @default(now())

  @@index([type])
  @@index([projectId])
  @@index([createdAt])
  @@map("ai_generations")
}

// ==========================================
// ENUMS
// ==========================================

enum ProjectStatus {
  DRAFT
  IN_PROGRESS
  REVIEW
  PUBLISHED
  ARCHIVED
}

enum TemplateCategory {
  HOMEPAGE
  PRICING
  FEATURES
  BLOG
  CONTACT
  ABOUT
  CUSTOM
}

enum AIGenerationType {
  SITEMAP
  CONTENT
  STYLE_GUIDE
  SEO_OPTIMIZATION
  SCHEMA_MARKUP
  IMAGE
  OTHER
}

enum UserRole {
  USER     // Usuario normal: ve solo sus proyectos
  EDITOR   // Editor: puede editar proyectos compartidos
  ADMIN    // Admin: ve y edita todos los proyectos
}
